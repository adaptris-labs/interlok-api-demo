#
# Not that http://localhost:8080/swagger may give you an error, because it's hard-coded to query localhost:8080/contacts/swagger
# Basically using docker-toolbox + windows7 means you're going for a non-localhost URL.
# You'll need to wait awhile as well for mysql to come up
# Check the DB has been created using the mysql console
# docker exec -it api_demo_mysql mysql -uroot -ppassword
version: '2'
services:
  mysql:
    image: mysql/mysql-server:5.6
    container_name: api_demo_mysql
    hostname: api_demo_mysql.local
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: api_demo
      MYSQL_USER: api_demo
      MYSQL_PASSWORD: api_demo
    ports:
      - '3306:3306'
    # Mount and execute our SQL files.
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
      
  interlok:
    ## Build or not build
    # build:
    #  context: .
    #  dockerfile: Dockerfile
    image: lewinc/interlok-api-demo:latest
    container_name: api_demo_interlok
    hostname: api_demo_interlok.local
    environment:
      JVM_ARGS: -Xmx1G
      # Windows 7/docker-toolbox; you probably want to change from localhost:8080 to 192.168.99.100:8080 or similar.
      # So that the swagger file returned back to you is "testable" in the local swagger deployment.
      JAVA_OPTS: -Dinterlok.db.url=jdbc:mysql://mysql:3306/api_demo -Dinterlok.db.user=api_demo -Dinterlok.db.password=api_demo -Dinterlok.api.host=localhost:8080
    ports:
      - '8080:8080'
    depends_on:
      - mysql
    links:
      - mysql:mysql
     
    
